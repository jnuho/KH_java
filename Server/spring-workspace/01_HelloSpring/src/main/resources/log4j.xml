<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

  <!-- 1. Appender 태그 : console에 찍음. log출력에 대한 환경설정하는 태그.
              로그를 어디로 출력을 할지 [콘솔/파일/DB] -->
  <appender name="console" class="org.apache.log4j.ConsoleAppender">
    <param name="Target" value="System.out" />
    <!-- 로그가 찍히는 형식  m : message n: newline -->
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}] %-5p: %l - %m%n" />
    </layout>
    <!-- <layout class="org.apache.log4j.HTMLLayout"></layout> -->
    <!-- <layout class="org.apache.log4j.xml.XMLLayout"></layout> -->
  </appender>

  <!-- 2. 파일에 로그 찍기 다른 Append를 이용하면됨 -> DailyRollingFileAppender -->
  <appender name="filelogger" class="org.apache.log4j.DailyRollingFileAppender">
    <param name="file" value="C://logs//spring//spring.log" />
    <!-- determine log append / replace -->
    <param name="Append" value="true" />
    <param name="dataPattern" value=".yyyy-MM-dd" />
    <layout class="org.apache.log4j.PatternLayout">
       <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}] %-5p: %l - %m%n" />
    </layout>
  </appender>
  
  <!-- 3. sql구문 로그 남기기  -->
  <appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%-5p: %m%n" />
    </layout>
  </appender>

  <!-- Application Loggers 
      어느 부분에서 어떤 단계에서 Appender를 실행 할 지 결정 -->
  <logger name="jdbc.sqlonly" additivity="false">
    <level value="INFO" />
    <appender-ref ref="sqlLogger" />
  </logger>
  <logger name="jdbc.resultsettable" additivity="false">
    <level value="INFO" />
    <appender-ref ref="sqlLogger" />
  </logger>

  <!-- Application Loggers -->
  <logger name="com.kh.spring">
    <!-- <level value="info" /> -->
    <level value="debug" />
    <!-- name(com.kh.spring)에 해당 하는 패키지의 모든 로그가 level INFO이상의 로그를 찍음
     trace -> DEBUG(개발시 사용하는 로그들)
           -> INFO(RUNTIME 중 상태변경, 정보성 메시지를 담을때)
           -> WARN(프로그램 실행시 문제가 없지만, 향후 시스템에서 error의 원인이 될 수 있다는 경고메시지)
           -> ERROR(어떤 요청을 처리할때 발생한 문제, 프로그램 동작안함)
           -> FATAL(심각한 에러, 메모리에 대한 손상, 운영체제 손상)
     => 개발자가 직접 에러 레벨 정함
     -->
  </logger>
  
  <!-- 3rdparty Loggers -->
  <logger name="org.springframework.core">
    <level value="info" />
  </logger>
  
  <logger name="org.springframework.beans">
    <level value="info" />
  </logger>
  
  <logger name="org.springframework.context">
    <level value="info" />
  </logger>

  <logger name="org.springframework.web">
    <level value="info" />
  </logger>

  <!-- Root Logger -->
  <root>
    <priority value="warn" />
    <appender-ref ref="console" />
    <appender-ref ref="filelogger" />
  </root>
  
</log4j:configuration>
